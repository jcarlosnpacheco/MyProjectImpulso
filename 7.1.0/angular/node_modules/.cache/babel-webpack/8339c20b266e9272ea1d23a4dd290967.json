{"ast":null,"code":"\"use strict\"; // Experimental API below\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * get input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * Now gets values of inputs (including \"checked\" status radios, checkboxes), textareas and selects (including multiselects)\n * Tries to identify the elements as exact as possible, falls back to numeric index when identification fails\n * WIP refactor by: PatrickJS\n */\n\nfunction __getInputValues() {\n  var _inputs = document.querySelectorAll('input, textarea, select');\n\n  var inputs = Array.prototype.slice.call(_inputs);\n  return inputs.map(function (input) {\n    var inputTagName = input.tagName.toLowerCase();\n    var inputType = input.type;\n    var inputId = input.id && typeof input.id === 'string' ? input.id : null;\n    var inputName = input.name && typeof input.name === 'string' ? input.name : null;\n    var inputValue = input.value && typeof input.value === 'string' ? input.value : null;\n    var inputChildNodes = input.childNodes;\n    var inputSelected = Boolean(input.selected);\n    var elementStore = {\n      'tag': inputTagName,\n      'type': null,\n      'id': inputId,\n      'name': inputName,\n      'value': '',\n      'checked': false,\n      'options': []\n    };\n\n    if ('input' === inputTagName || 'textarea' === inputTagName) {\n      elementStore['type'] = inputType;\n\n      if ('input' !== inputTagName) {\n        elementStore['value'] = inputValue;\n        return elementStore;\n      }\n\n      switch (inputType) {\n        case 'checkbox':\n        case 'radio':\n          elementStore['checked'] = inputSelected;\n          elementStore['value'] = inputValue;\n          return elementStore;\n\n        case 'image':\n        case 'button':\n        case 'submit':\n        case 'reset':\n        default:\n          // These types don't need any config and thus need no update, they only were stored because they match \"input\"\n          return elementStore;\n      }\n    } else if ('select' === inputTagName) {\n      var childNodes = Array.prototype.slice.call(inputChildNodes);\n      var options = childNodes.map(function (option, i) {\n        return {\n          value: option['value'],\n          selected: Boolean(option['selected'])\n        };\n      });\n      elementStore['options'] = options;\n      return elementStore;\n    }\n\n    return elementStore;\n  });\n}\n\nexports.__getInputValues = __getInputValues;\n/**\n * set input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * WIP refactor by: PatrickJS\n */\n\nfunction __setInputValues($inputs) {\n  var inputs = document.querySelectorAll('input, textarea');\n  $inputs.forEach(function (store, i) {\n    if ('input' === store.tag || 'textarea' === store.tag) {\n      if ('input' === store.tag && ('checkbox' === store.type || 'radio' === store.type)) {\n        var selector = 'input' + (null !== store.id ? '#' + store.id : '') + '[type=\"' + store.type + '\"]' + (null !== store.name ? '[name=\"' + store.name + '\"]' : '') + '[value=\"' + store.value + '\"]';\n        var element = document.body.querySelector(selector);\n\n        if (element && Boolean(store['checked'])) {\n          element['checked'] = 'checked';\n          element.dispatchEvent(new CustomEvent('input', {\n            detail: element['checked']\n          }));\n        }\n      } else if ('input' === store.tagName.toLowerCase() && ('image' === store.type || 'button' === store.type || 'submit' === store.type || 'reset' === store.type)) {// These types don't need any config and thus need no update, they only were stored because they match \"input\"\n      } else {\n        if (null === store.id && null === store.name) {\n          if (store.value.length && inputs[i] && inputs[i].tagName.toLowerCase() === store.tag && ('textarea' === store.tag || inputs[i].getAttribute('type') === store.type) && ('string' !== typeof inputs[i].id || !inputs[i].id.length) && ('string' !== typeof inputs[i].getAttribute('name') || !inputs[i].getAttribute('name').length)) {\n            inputs[i]['value'] = store.value;\n            inputs[i].dispatchEvent(new CustomEvent('input', {\n              detail: inputs[i]['value']\n            }));\n          }\n        } else {\n          var selector = 'input' + (null !== store.id ? '#' + store.id : '') + ('input' === store.tag ? '[type=\"' + store.type + '\"]' : '') + (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n          var element = document.body.querySelector(selector);\n\n          if (element && store.value.length) {\n            element['value'] = store.value;\n            element.dispatchEvent(new CustomEvent('input', {\n              detail: element['value']\n            }));\n          }\n        }\n      }\n    } else if ('select' === store.tag) {\n      var select_1 = null;\n\n      if (null === store.id && null === store.name) {\n        if (inputs[i] && inputs[i].tagName.toLowerCase() === store.tag && ('string' !== typeof inputs[i].id || !inputs[i].id.length) && ('string' !== typeof inputs[i].getAttribute('name') || !inputs[i].getAttribute('name').length)) {\n          select_1 = inputs[i];\n        }\n      } else {\n        var selector = 'select' + (null !== store.id ? '#' + store.id : '') + (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n        var element = document.body.querySelector(selector);\n\n        if (element) {\n          select_1 = element;\n        }\n      }\n\n      if (select_1) {\n        store.options.forEach(function (storedOption, j) {\n          var option = select_1.querySelector('option[value=\"' + storedOption.value + '\"]');\n\n          if (!option && select_1.childNodes[j] && ('string' !== typeof select_1.childNodes[j]['value'] || !select_1.childNodes[j]['value'].length)) {\n            option = select_1.childNodes[j];\n          }\n\n          if (option && !!storedOption.selected) {\n            option['selected'] = 'selected';\n            option.dispatchEvent(new CustomEvent('input', {\n              detail: option['selected']\n            }));\n          }\n        });\n      }\n    }\n  });\n}\n\nexports.__setInputValues = __setInputValues;\n\nfunction __createInputTransfer() {\n  var $inputs = __getInputValues();\n\n  return function restoreInputValues() {\n    return __setInputValues($inputs);\n  };\n}\n\nexports.__createInputTransfer = __createInputTransfer; //# sourceMappingURL=experimental.js.map","map":{"version":3,"sources":["C:/Users/jcarl/Downloads/MyProjectImpulso/7.1.0/angular/node_modules/@angularclass/hmr/dist/experimental.js"],"names":["Object","defineProperty","exports","value","__getInputValues","_inputs","document","querySelectorAll","inputs","Array","prototype","slice","call","map","input","inputTagName","tagName","toLowerCase","inputType","type","inputId","id","inputName","name","inputValue","inputChildNodes","childNodes","inputSelected","Boolean","selected","elementStore","options","option","i","__setInputValues","$inputs","forEach","store","tag","selector","element","body","querySelector","dispatchEvent","CustomEvent","detail","length","getAttribute","select_1","storedOption","j","__createInputTransfer","restoreInputValues"],"mappings":"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","sourcesContent":["\"use strict\";\n// Experimental API below\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * get input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * Now gets values of inputs (including \"checked\" status radios, checkboxes), textareas and selects (including multiselects)\n * Tries to identify the elements as exact as possible, falls back to numeric index when identification fails\n * WIP refactor by: PatrickJS\n */\nfunction __getInputValues() {\n    var _inputs = document.querySelectorAll('input, textarea, select');\n    var inputs = Array.prototype.slice.call(_inputs);\n    return inputs.map(function (input) {\n        var inputTagName = input.tagName.toLowerCase();\n        var inputType = input.type;\n        var inputId = (input.id && typeof input.id === 'string') ? input.id : null;\n        var inputName = (input.name && typeof input.name === 'string') ? input.name : null;\n        var inputValue = (input.value && typeof input.value === 'string') ? input.value : null;\n        var inputChildNodes = input.childNodes;\n        var inputSelected = Boolean(input.selected);\n        var elementStore = {\n            'tag': inputTagName,\n            'type': null,\n            'id': inputId,\n            'name': inputName,\n            'value': '',\n            'checked': false,\n            'options': []\n        };\n        if ('input' === inputTagName || 'textarea' === inputTagName) {\n            elementStore['type'] = inputType;\n            if ('input' !== inputTagName) {\n                elementStore['value'] = inputValue;\n                return elementStore;\n            }\n            switch (inputType) {\n                case 'checkbox':\n                case 'radio':\n                    elementStore['checked'] = inputSelected;\n                    elementStore['value'] = inputValue;\n                    return elementStore;\n                case 'image':\n                case 'button':\n                case 'submit':\n                case 'reset':\n                default:\n                    // These types don't need any config and thus need no update, they only were stored because they match \"input\"\n                    return elementStore;\n            }\n        }\n        else if ('select' === inputTagName) {\n            var childNodes = Array.prototype.slice.call(inputChildNodes);\n            var options = childNodes.map(function (option, i) {\n                return { value: option['value'], selected: Boolean(option['selected']) };\n            });\n            elementStore['options'] = options;\n            return elementStore;\n        }\n        return elementStore;\n    });\n}\nexports.__getInputValues = __getInputValues;\n/**\n * set input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * WIP refactor by: PatrickJS\n */\nfunction __setInputValues($inputs) {\n    var inputs = document.querySelectorAll('input, textarea');\n    $inputs.forEach(function (store, i) {\n        if ('input' === store.tag || 'textarea' === store.tag) {\n            if ('input' === store.tag && ('checkbox' === store.type || 'radio' === store.type)) {\n                var selector = 'input' + (null !== store.id ? '#' + store.id : '') + '[type=\"' + store.type + '\"]' + (null !== store.name ? '[name=\"' + store.name + '\"]' : '') +\n                    '[value=\"' + store.value + '\"]';\n                var element = document.body.querySelector(selector);\n                if (element && Boolean(store['checked'])) {\n                    element['checked'] = 'checked';\n                    element.dispatchEvent(new CustomEvent('input', { detail: element['checked'] }));\n                }\n            }\n            else if ('input' === store.tagName.toLowerCase() &&\n                ('image' === store.type || 'button' === store.type || 'submit' === store.type || 'reset' === store.type)) {\n                // These types don't need any config and thus need no update, they only were stored because they match \"input\"\n            }\n            else {\n                if (null === store.id && null === store.name) {\n                    if (store.value.length &&\n                        inputs[i] &&\n                        inputs[i].tagName.toLowerCase() === store.tag &&\n                        ('textarea' === store.tag || inputs[i].getAttribute('type') === store.type) &&\n                        ('string' !== typeof inputs[i].id || !inputs[i].id.length) &&\n                        ('string' !== typeof inputs[i].getAttribute('name') ||\n                            !inputs[i].getAttribute('name').length)) {\n                        inputs[i]['value'] = store.value;\n                        inputs[i].dispatchEvent(new CustomEvent('input', { detail: inputs[i]['value'] }));\n                    }\n                }\n                else {\n                    var selector = 'input' +\n                        (null !== store.id ? '#' + store.id : '') + ('input' === store.tag ? '[type=\"' + store.type + '\"]' : '') +\n                        (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n                    var element = document.body.querySelector(selector);\n                    if (element && store.value.length) {\n                        element['value'] = store.value;\n                        element.dispatchEvent(new CustomEvent('input', { detail: element['value'] }));\n                    }\n                }\n            }\n        }\n        else if ('select' === store.tag) {\n            var select_1 = null;\n            if (null === store.id && null === store.name) {\n                if (inputs[i] && inputs[i].tagName.toLowerCase() === store.tag && ('string' !== typeof inputs[i].id || !inputs[i].id.length) &&\n                    ('string' !== typeof inputs[i].getAttribute('name') || !inputs[i].getAttribute('name').length)) {\n                    select_1 = inputs[i];\n                }\n            }\n            else {\n                var selector = 'select' + (null !== store.id ? '#' + store.id : '') + (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n                var element = document.body.querySelector(selector);\n                if (element) {\n                    select_1 = element;\n                }\n            }\n            if (select_1) {\n                store.options.forEach(function (storedOption, j) {\n                    var option = select_1.querySelector('option[value=\"' + storedOption.value + '\"]');\n                    if (!option &&\n                        select_1.childNodes[j] &&\n                        ('string' !== typeof select_1.childNodes[j]['value'] || !select_1.childNodes[j]['value'].length)) {\n                        option = select_1.childNodes[j];\n                    }\n                    if (option && !!storedOption.selected) {\n                        option['selected'] = 'selected';\n                        option.dispatchEvent(new CustomEvent('input', { detail: option['selected'] }));\n                    }\n                });\n            }\n        }\n    });\n}\nexports.__setInputValues = __setInputValues;\nfunction __createInputTransfer() {\n    var $inputs = __getInputValues();\n    return function restoreInputValues() {\n        return __setInputValues($inputs);\n    };\n}\nexports.__createInputTransfer = __createInputTransfer;\n//# sourceMappingURL=experimental.js.map"]},"metadata":{},"sourceType":"script"}